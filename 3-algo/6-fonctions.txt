Les FONCTIONS

I - C'est quoi ?
Une fonction c'est un ensemble d'instructions auquel on va donner un nom.
On va pouvoir réutiliser cet ensemble d'instructions à plusieurs endroits sans avoir besoin de le récrire.

Une fonction peut avoir des paramètres d'entrée, et avoir une valeur de retour.
Il y a fort longtemps, on différenciait les procédures des fonctions.
Une procédure : ensemble d'instructions
Une fonction : ensemble d'instructions + valeur de retour

II - utilisation basique
Variables
Debut fonction sayHello()
	afficher "HELLO"
Fin fonction

Variables
Algo
	sayHello()
	sayHello()
	sayHello // sans parenthèse, la fonction n'est pas exécutée
Fin algo

III - variables locales / portée locale
Variables
	// les variables d'une fonction ne sont accessibles que dans cette fonction
	chiffre1: entier
	chiffre2: entier
	somme: entier
Debut fonction add5and10()
	chiffre1 = 5
	chiffre2 = 10
	somme = chiffre1 + chiffre2
	somme = 2
Fin fonction

Variables
	name: chaine
	somme: entier
Algo
	name = saisir "C'est quoi ton petit nom" 
	somme = 43
	add5and10()
	
	afficher somme // affiche 43
	afficher chiffre1 // plantage : la variable n'existe pas
Fin algo

IV - Valeur de retour
Variables
	chiffre1: entier
	chiffre2: entier
	somme: entier
Debut fonction add()
	chiffre1 = 10
	chiffre2 = 3
	somme = chiffre1 + chiffre2
	
	retourner somme
Fin fonction

Variables
	resultat: entier
	resultat2: entier
Algo
	afficher "Bonjour"
	resultat = add()
	afficher resultat // affiche 13
	
	resultat2 = add()
	afficher resultat2 // affiche 13
	
	afficher add() // affiche 13
	
	SI 15 == add()
		// on rentre ici ? NON
	FIN SI
Fin algo

V - Les paramètres d'entrées
Les paramètres d'une fonction sont des valeurs qui seront passées
lors de l'appel de la fonction (dans l'algo principal par exemple)

Variables
	somme: entier
Debut fonction add(chiffre1:entier, chiffre2:entier)
	somme = chiffre1 + chiffre2
	retourner somme
	retourner 15 // cette instruction n'est jamais exécutée puisque la fonction s'est arrêtée lors du premier "retourner"
Fin fonction

Variables 
	resultat: entier
	nb1: entier
	nb2: entier
Algo
	resultat = add() // plantage : fonction attend 2 paramètres que je ne lui passe pas
	
	resultat = add(15, 20) 
	afficher resultat // affiche 35
	
	resultat = add(21, 5)
	afficher resultat // affiche 26
	
	nb1 = 2
	nb2 = 3
	resultat = add(nb1, nb2)
	afficher resultat // affiche 5
	
	nb1 = saisir "Chiffre 1 SVP"
	nb2 = saisir "Chiffre 2 SVP"
	resultat = add(nb1, nb2)
	afficher resultat // affiche ?? On ne sait pas à l'avance puisque que ça dépend de ce que l'utilisateur va saisir
Fin algo

VI - paramètres facultatifs
Variables
	// rendre un paramètre facultatif consiste à lui donner une 
	// valeur par défaut (directement entre les parenthèses dans la plupart des langages)
	// on ne peut avoir des facultatifs avant des obligatoires
Debut fonction sayHello(name: chaine, upper:booleen=faux, surprised:booleen=faux)
	SI upper == vrai
		afficher "HELLO " CONCAT upper(name)
	SINON
		afficher "Hello " CONCAT name
	FIN SI
	SI surprised == vrai
		afficher "!"
	FIN SI
Fin fonction

Variables
	name: chaine
Debut algo
	name = saisir "Ton prénom ?"
	sayHello(name)
	
	sayHello("Fab", faux) // affiche Hello Fab
	sayHello("Fab", vrai) // affiche HELLO FAB
	sayHello("Fab") // affiche Hello Fab
	sayHello("Tom", faux, vrai) // afficher Hello Tom!
	// il faut donner une valeur pour le 2eme paramètre (bien que facultatif) si l'on veut donner une valeur pour le troisième.
	
	// si les paramètres obligatoires se trouvaient après les paramètres facultatifs
	// il faudrait du coup donner obligaoirement une valeur pour les facultatifs
	avant de pouvoir une valeur pour les obligatoires : paradoxe du mauvais développeur

	sayHello(faux,faux,"Tom") // c'est n'imp
Fin algo

Exercices 
•	Créer une fonction qui multiplie deux nombres (passés en paramètre) entre eux et retourne le résultat. Utiliser cette fonction dans un algo principal et afficher le résultat.
Variables
	produit: entier
Début Fonction multiplication(nb1:entier, nb2:entier)
	produit = nb1 * nb2
	retourner produit
Fin fonction

Variables
	nombre1: entier
	nombre2: entier
	result: entier
Debut algo
	nombre1 = saisir "Saisir le premier nombre"
	nombre2 = 14
	result = multiplication(nombre1, nombre2)
	afficher result
Fin algo

•	Créer une fonction qui prend un âge en paramètre et retourne si oui ou non cet âge est celui d’une personne majeure.
Utilisez cette fonction dans un algo principal, et afficher « Vous êtes majeur » si renvoie vrai, « Vous êtes mineur » sinon.
Variables
Debut fonction isMajeur(age:entier)
	SI age >= 18
		retourner vrai
	SINON 
		retourner faux
	FIN SI
Fin fonction

Variables	
	age:entier
	majeur: booleen
Debut algo
	age = saisir "Quel est ton age ?"
	majeur = isMajeur(age)
	SI majeur == vrai
		Afficher "Vous êtes majeur"
	SINON
		Afficher "Vous êtes mineur"
	FIN SI
	
	age = saisir "Ton age ?"
	SI isMajeur(age)
		Afficher "Vous êtes majeur"
	SINON
		Afficher "Vous êtes mineur"
	FIN SI
Fin algo

•	Créer une fonction qui affiche tous les éléments d’un tableau passé en paramètre. Ensuite dans un algo principal, créer un tableau avec quelques valeurs, et utilisez la fonction pour afficher ces valeurs
Variables
	i: entier
Debut fonction afficheTableau(notes:tableau d'entier)
	POUR i de 0 à LONGUEUR(notes)-1 PAR PAS DE 1
		afficher notes[i]
	FIN POUR
Fin fonction

Variables
	listeNotes: tableau entier
	listeEntiers: tableau entier
Algo
	ajouter 10 dans listeNotes
	ajouter 20 dans listeNotes
	afficherTableau(listeNotes)
	

	ajouter 12 dans listeEntiers
	ajouter 23 dans listeEntiers
	ajouter 43 dans listeEntiers
	afficheTableau(listeEntiers)
Fin algo

Créer une fonction qui dit si oui ou non une chaine de caractère (passée en paramètre) possède 5 caractères. LONGUEUR(chaine)
Utilisez ensuite cette fonction dans un algo principal
Variables
	verif: booleen
Debut fonction hasFiveChars(word:chaine)
	// V1
	SI longueur(word) == 5
		verif = vrai
		retourner verif
	SINON
		verif = faux
		retourner verif
	FIN SI
	
	// V2 
	SI longueur(word) == 5
		verif = vrai
	SINON
		verif = faux
	FIN SI
	
	retourner verif
	
	// V3 
	SI longueur(word) == 5
		retourner vrai
	SINON
		retourner faux
	FIN SI
	
	// V4 
	verif = longueur(word) == 5 ? vrai : faux
	retourner verif
	
	// V5 
	verif = longueur(word) == 5
	retourner verif
	
	// V6
	retourner longueur(word) == 5

Fin fonction

Adaptez l'exercice du palindrome : transformer l'algo pour créer une fonction
qui prend une chaine en paramètre et dit si oui ou non cette chaine est un palindrome
Dans un algo principal, demandez deux mots à l'utilisateur
et afficher à l'écran pour chacun de ces mots si c'est un palindrome ou non

Variables
	i: entier
	indexMax: entier
	isPalin: booleen
Debut fonction isPalindrome(word:chaine)
	i = 0
	indexMax = ROUND((LONGUEUR(word)-1)/2 - 1)
	isPalin = vrai 
	TANT QUE i <= indexMax ET isPalin
		SI  word[i] != word[LONGUEUR(word)-1-i]
			isPalin = faux
		FIN SI
		i = i + 1	
	FIN TANT QUE
	
	retourner isPalin
Fin fonction

Variables
	verif: booleen
Algo
	mot = saisir "Saisissez un mot"
	
	verif = isPalindrome(mot)

	SI verif
		afficher "palindrome"
	SINON
		afficher "papalindrome"
	FIN SI
	
	// etc.. du code, du code, et du code
	
	mot2 = saisir "Saisissez un mot"
	
	verif = isPalindrome(mot2)

	SI verif
		afficher "palindrome"
	SINON
		afficher "papalindrome"
	FIN SI
Fin algo

Exercice 14 -
Créer une fonction servirBoisson qui affiche à l’écran « Voici un café », ou « Voici un thé » ou « Voici un cola ». La fonction prend une chaine de caractère en paramètre : c’est la boisson que l’on veut.
Si le paramètre ne correspond ni à café, thé ou cola, il faut afficher « Désolé, on ne sert pas cette boisson ». Si le paramètre n’est pas passé, il faut servir par défaut un café.
Debut fonction servirBoisson(boisson:chaine="café")
	SELON boisson
		CAS "café"
			afficher "Voici un café"
		CAS "thé"
			afficher "Voici un thé"
		CAS "cola"
			afficher "Voici un colé"
		DEFAUT
			afficher "Désolé, on ne sert pas cette boisson"
	FIN SELON
Fin fonction

Exercice 12
Créer une fonction qui prend en paramètre un tableau, et qui retourne un nouveau tableau dont tous les éléments du premier ont été inversés. [1,3,2] => [2,3,1]

Variables
	newTab: tableau
	i: entier
Debut fonction inverse(tab:tableau)
	0 4
	1 3
	2 2
	3 1
	4 0
	// V1 
	POUR i de 0 à LONGUEUR(tab)-1 PAR PAS DE 1
		newTab[i] = tab[LONGUEUR(tab)-1-i]
 	FIN POUR
	
	// V2 
	ajouter tab[4] dans newTab
	ajouter tab[3] dans newTab
	ajouter tab[2] dans newTab
	ajouter tab[1] dans newTab
	ajouter tab[0] dans newTab
	POUR i de 0 à LONGUEUR(tab)-1 par pas de 1 
		ajouter tab[LONGUEUR(tab)-1-i] dans newTab
	FIN POUR 
	
	// V3
	POUR i de LONGUEUR(tab)-1 à 0 par pas de -1 
		ajouter tab[i] dans newTab
	FIN POUR
	
	retourner newTab
Fin fonction






